To simulate MFT(Multiprogramming with Fixed number of Tasks)

------------------------------------------------------------------------------------------------
Aim: To write a C program to simulate MFT(Multiprogramming with Fixed number of Tasks)
Program:
#include<stdio.h>
#include<conio.h>
main()
{
	int ms,i,ps[20],n,size,p[20],s,intr=0;
	clrscr();
	printf("Enter size of memory:");
	scanf("%d",&ms);
	printf("Enter memory for OS:");
	scanf("%d",&s);
	ms-=s;
	printf("Enter no.of partitions to be divided:");
	scanf("%d",&n);
	size=ms/n;
	for(i=0;i<n;i++)
	{
		printf("\n Enter process and process size:");
		scanf("%d%d",&p[i],&ps[i]);
		if(ps[i]<=size)
		{
			intr=intr+size-ps[i];
			printf("process%d is allocated\n",p[i]);
		}
		else
			printf("\n process%d is blocked",p[i]);
	}
	printf("\n internal fragmentation is %d",intr);
	getch();
}
Output:

 
---------------------------------------------------------------------------------------------
b)Write a C programming to simulate MFT(Multiprogramming with Variable number of Tasks)

Aim: To write a C program to simulate MVT (Multiprogramming with Variable number of Tasks) 
 Program:
#include<stdio.h>
#include<conio.h>
main()
{
	int i,m,n,tot,s[20];
	clrscr();
	printf("Enter total memory size:");
	scanf("%d",&tot);
	printf("Enter no. of pages:");
	scanf("%d",&n);
	printf("Enter memory for OS:");
	scanf("%d",&m);
	for(i=0;i<n;i++)
	{
		printf("Enter size of page%d:",i+1);
		scanf("%d",&s[i]);
	}
	tot=tot-m;
	for(i=0;i<n;i++)
	{
		if(tot>=s[i])
		{
			printf("Allocate page %d\n",i+1);
			tot=tot-s[i];
		}
		else
			printf("process p%d is blocked\n",i+1);
	}
	printf("External Fragmentation is=%d",tot);
	getch();
}
 
Output:

 
 
